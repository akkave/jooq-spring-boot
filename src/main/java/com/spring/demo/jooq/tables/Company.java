/**
 * This class is generated by jOOQ
 */
package com.spring.demo.jooq.tables;


import com.spring.demo.jooq.Keys;
import com.spring.demo.jooq.Mylocaldb;
import com.spring.demo.jooq.tables.records.CompanyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 1852338075;

    /**
     * The reference instance of <code>mylocaldb.company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>mylocaldb.company.company_id</code>.
     */
    public final TableField<CompanyRecord, Integer> COMPANY_ID = createField("company_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mylocaldb.company.company_name</code>.
     */
    public final TableField<CompanyRecord, String> COMPANY_NAME = createField("company_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>mylocaldb.company.id</code>.
     */
    public final TableField<CompanyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>mylocaldb.company</code> table reference
     */
    public Company() {
        this("company", null);
    }

    /**
     * Create an aliased <code>mylocaldb.company</code> table reference
     */
    public Company(String alias) {
        this(alias, COMPANY);
    }

    private Company(String alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(String alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mylocaldb.MYLOCALDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CompanyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_COMPANY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CompanyRecord>> getKeys() {
        return Arrays.<UniqueKey<CompanyRecord>>asList(Keys.KEY_COMPANY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Company as(String alias) {
        return new Company(alias, this);
    }

    /**
     * Rename this table
     */
    public Company rename(String name) {
        return new Company(name, null);
    }
}
