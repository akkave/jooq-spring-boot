/**
 * This class is generated by jOOQ
 */
package com.spring.demo.jooq.tables;


import com.spring.demo.jooq.Keys;
import com.spring.demo.jooq.Mylocaldb;
import com.spring.demo.jooq.tables.records.AbcRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Abc extends TableImpl<AbcRecord> {

    private static final long serialVersionUID = -1263190145;

    /**
     * The reference instance of <code>mylocaldb.abc</code>
     */
    public static final Abc ABC = new Abc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AbcRecord> getRecordType() {
        return AbcRecord.class;
    }

    /**
     * The column <code>mylocaldb.abc.id</code>.
     */
    public final TableField<AbcRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>mylocaldb.abc.name</code>.
     */
    public final TableField<AbcRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

    /**
     * The column <code>mylocaldb.abc.rank</code>.
     */
    public final TableField<AbcRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>mylocaldb.abc.currentDate</code>.
     */
    public final TableField<AbcRecord, Timestamp> CURRENTDATE = createField("currentDate", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>mylocaldb.abc</code> table reference
     */
    public Abc() {
        this("abc", null);
    }

    /**
     * Create an aliased <code>mylocaldb.abc</code> table reference
     */
    public Abc(String alias) {
        this(alias, ABC);
    }

    private Abc(String alias, Table<AbcRecord> aliased) {
        this(alias, aliased, null);
    }

    private Abc(String alias, Table<AbcRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Mylocaldb.MYLOCALDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AbcRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ABC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AbcRecord> getPrimaryKey() {
        return Keys.KEY_ABC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AbcRecord>> getKeys() {
        return Arrays.<UniqueKey<AbcRecord>>asList(Keys.KEY_ABC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Abc as(String alias) {
        return new Abc(alias, this);
    }

    /**
     * Rename this table
     */
    public Abc rename(String name) {
        return new Abc(name, null);
    }
}
